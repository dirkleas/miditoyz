#!/usr/bin/env python3

# Copyright (c) 2023 Dirk Leas
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT

#
# mididump - dump midi file events, similar to midiraw w/t --debug option
#
# notes:
#   - bpm = 60,000,000 / int.from_bytes(tempo_byte_data, byteorder='big')
#

import os, typer
from music21 import midi

app = typer.Typer()


def dump_midi(filename: str, metadata: bool = False):
    """Dump a MIDI file in raw text format, optionally metadata only"""
    mf = midi.MidiFile()
    mf.open(filename)
    mf.read()
    mf.close()

    dump = []
    for i, track in enumerate(mf.tracks):
        time_delta = time_total = 0
        for event in track.events:
            if isinstance(event, midi.DeltaTime):
                time_delta = event.time
                time_total += event.time
            elif (
                metadata
                and hasattr(event.type, "name")
                and (
                    event.type.name in ["NOTE_ON", "NOTE_OFF"]
                    or (
                        event.type.name == "CONTROLLER_CHANGE"
                        and event.parameter1 in [64, 67]
                    )
                    or event.type.name == "END_OF_TRACK"
                )
            ):
                pass
            else:
                dump.append(
                    f"{str(event).replace('<music21.midi.MidiEvent ', '')[:-1]}, time={time_delta}, clock={time_total}"
                )
    return dump


@app.command()
def main(
    song: str = typer.Argument(
        ..., help="The path to the MIDI song file to be analyzed"
    ),
    metadata: bool = typer.Option(False, help="Show only metadata"),
):
    """Dump a MIDI file in raw text format. if you need hashdump-esque details, use "midiraw --debug" instead"""
    for dump in dump_midi(song, metadata):
        typer.echo(dump)


if __name__ == "__main__":
    app()
