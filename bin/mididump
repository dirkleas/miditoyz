#!/usr/bin/env python3

#
# mididump - dump midi file events, similar to midiraw w/t --debug option
#
# notes:
#   - bpm = 60,000,000 / int.from_bytes(tempo_byte_data, byteorder='big')
#

import os, typer
from music21 import midi

app = typer.Typer()


def dump_midi(filename: str):
    """Dump a MIDI file in raw text format"""
    mf = midi.MidiFile()
    mf.open(filename)
    mf.read()
    mf.close()

    dump = []
    for i, track in enumerate(mf.tracks):
        time_delta = 0
        for event in track.events:
            if isinstance(event, midi.DeltaTime):
                time_delta = event.time
            # elif not isinstance(event, midi.MidiEvent):
            #     # ensure event.type has name attribute
            #     if hasattr(event.type, "name") and event.type.name == "SET_TEMPO":
            #         tempo = int.from_bytes(event.data, byteorder="big")
            #         bpm = round(60_000_000 / tempo)
            #         typer.echo(f"  TEMPO: {tempo:,} MPQN, {bpm} BPM")
            #     else:
            #         typer.echo(f"  {event.type}: {event.type.name}")
            else:
                dump.append(
                    f"{str(event).replace('<music21.midi.MidiEvent ', '')[:-1]}, time={time_delta}"
                )
    return dump


@app.command()
def main(
    filename: str = typer.Argument(
        ..., help="The path to the MIDI file to be analyzed."
    )
):
    """Dump a MIDI file in raw text format. if you need hashdump-esque details, use "midiraw --debug" instead"""
    for dump in dump_midi(filename):
        typer.echo(dump)


if __name__ == "__main__":
    app()
