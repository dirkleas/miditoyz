#!/usr/bin/env python3

# Copyright (c) 2023 Dirk Leas
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT

#
# miditoyz - care and feeding for you midi song collection
#
# todo:
#   general:
#       - tbd
#   init:
#       - consider whether "broken" songs should be removed from catalog
#       - add windows notification support via win10toast
#       - scan songs looking for other instruments via track titles or
#         sequencer_specific meta events, plus add extra cli arg "genre" and append
#         to event.track_name for preference key mapping
#         (e.g. "Jazz Drums" => (0, 0, 1) Jazz Brush Expanded)
#       - consider integrating music/folder and song metadata like genre,
#         favorites, wikipedia summaries, etc. renderable to stdout
#       - consider advanced analytics in clav repo datalist.ipynb for resolving
#         sequencer_specific events or metaMessage.track[0[]['title] to resolve
#         voices for voice_preferences
#
# notes/references:
#   - reference song with rich meta, sysex and sequencer_specific events in my
#     personal collection:
#       clav.toys/more clav files/2.NEW FollowLights/02.Prelude.s944.mid
#   - catalog list format: [{"title": "Autumn Leaves", "song": "hash.mid"}, ...]
#

import os, hashlib, shutil, json, pathlib, platform, pickle, time, mido, typer, parse
from collections import defaultdict
from music21 import midi

homedir = pathlib.Path.home()
settings = json.load(open(pathlib.Path(homedir) / ".miditoyz" / "settings.json"))
voice_preferences = {
    tuple(v[0]): tuple(v[1]) for k, v in settings.get("voices").items()
}

app = typer.Typer()


## building blocks...
def dump_midi(filename: str, metadata: bool = False):
    """Dump a MIDI file in raw text format, optionally metadata only"""
    mf = midi.MidiFile()
    mf.open(filename)
    mf.read()
    mf.close()

    dump = []
    for i, track in enumerate(mf.tracks):
        time_delta = time_total = 0
        for event in track.events:
            if isinstance(event, midi.DeltaTime):
                time_delta = event.time
                time_total += event.time
            elif (
                metadata
                and hasattr(event.type, "name")
                and (
                    event.type.name in ["NOTE_ON", "NOTE_OFF", "PITCH_BEND"]
                    or (
                        event.type.name == "CONTROLLER_CHANGE"
                        and not event.parameter1 in [0, 32]
                    )
                    or event.type.name == "END_OF_TRACK"
                )
            ):
                pass
            else:
                dump.append(
                    f"{str(event).replace('<music21.midi.MidiEvent ', '')[:-1]}, time={time_delta}, clock={time_total}"
                )
    return dump


def get_track_channel_voices(midi_filename, voices):
    typer.echo(f"song file: {midi_filename}")
    with mido.MidiFile(midi_filename) as mid:
        for i, track in enumerate(mid.tracks):
            channels = defaultdict(dict)
            typer.echo(f"  track: {i+1}")
            for msg in track:
                if msg.type == "track_name":
                    typer.echo(f'    track name: {track.name.strip() or "n/a"}')
                elif msg.type == "control_change" and msg.control == 0:
                    channels[msg.channel]["msb"] = msg.value
                elif msg.type == "control_change" and msg.control == 32:
                    channels[msg.channel]["lsb"] = msg.value
                elif msg.type == "program_change":
                    channels[msg.channel]["pc"] = msg.program + 1
            for channel in sorted(channels.keys()):
                voice = (
                    channels.get(channel).get("msb", 0),
                    channels.get(channel).get("lsb", 0),
                    channels.get(channel).get("pc", 1),
                )
                if voice in voices.keys():
                    typer.echo(
                        f"      channel {channel+1}: {voices.get(voice, voice)}, datalist voice MSB, LSB, PC: {voice[0]}, {voice[1]}, {voice[2]}"
                    )
                else:
                    typer.echo(
                        f"      channel {channel+1}: unrecognized voice, MSB, LSB, PC: {voice[0]}, {voice[1]}, {voice[2]}"
                    )


def is_midi(filename):
    return filename.lower().endswith((".midi", ".mid"))


def get_title(dump):
    """get first title from dump"""
    event = next(filter(lambda x: x.startswith("SEQUENCE_TRACK_NAME"), dump), None)
    if not event:
        return "n/a"
    else:
        return parse.parse(
            "SEQUENCE_TRACK_NAME, track={track}, channel={channel}, data=b{title}, time={time}",
            event,
        )["title"][1:-1]


def ingest_music(source_directory, destination_directory):
    """ingest music from source_directory into destination_directory"""
    typer.echo(
        f"ingesting source_directory: {source_directory} => destination_directory: {destination_directory}..."
    )
    # locate candidate songs...
    typer.echo(f"  scanning for duplicate songs...")
    songs = {}  # defaultdict(lambda: defaultdict(list)) not working...
    total_songs = 0  # total songs found, including dups...
    for dirpath, _, filenames in os.walk(source_directory):
        for filename in filenames:
            if is_midi(filename):
                total_songs += 1
                song = os.path.join(dirpath, filename)
                hash = hashlib.md5(open(song, "rb").read()).hexdigest()
                if not hash in songs:
                    songs[hash] = {"sources": []}
                songs[hash]["sources"].append(song)

    # hash for duplicates...
    typer.echo(
        f"  found {total_songs} total songs of which {len(songs)} are actually unique..."
    )

    # identify broken/unstreamable songs...
    typer.echo(
        f"  scanning for broken or invalid song files, this will take a while..."
    )
    songs_broken_mido = set()
    for song in [x["sources"][0] for x in songs.values()]:
        try:
            mido.MidiFile(song)
        except:
            songs_broken_mido.add(hash)
    # tbd: add broken identifier to catalog or remove broken songs...

    # copy unique songs to destination_directory...
    typer.echo("  copying unique songs to destination_directory, again patience...")
    if not len(os.listdir(destination_directory)) == len(songs.keys()):
        for hash, v in songs.items():  # fyi, this took 1m5.3s
            shutil.copyfile(
                v["sources"][0], pathlib.Path(destination_directory) / f"{hash}.mid"
            )

    # generate catalog...
    typer.echo("  generating song catalog...")

    # add metadata to catalog using dump_midi metadata...
    songs_broken_music21 = set()
    for song in [s for s in songs.keys()]:
        try:
            dump = dump_midi(
                pathlib.Path(destination_directory) / f"{song}.mid", metadata=True
            )
            songs[song] = {
                **{"title": get_title(dump), "dump": dump},
                **songs[song],
            }
        except:
            songs_broken_music21.add(song)
    json.dump(
        {"mido": list(songs_broken_mido), "music21": list(songs_broken_music21)},
        open(pathlib.Path(destination_directory) / "songs_broken.json", "w"),
        indent=2,
    )
    typer.echo(
        f'  {(len(songs_broken_mido) + len(songs_broken_music21)) / len(songs) * 100:.2f}% of songs are "broken" and have been logged...'
    )
    json.dump(
        songs, open(pathlib.Path(destination_directory) / "catalog.json", "w"), indent=2
    )
    settings = json.load(open(pathlib.Path(homedir) / ".miditoyz" / "settings.json"))
    settings["catalog"] = str(pathlib.Path(destination_directory) / "catalog.json")
    json.dump(
        settings, open(pathlib.Path(homedir) / ".miditoyz" / "settings.json", "w")
    )
    typer.echo(
        f"  song catalog saved to {pathlib.Path(destination_directory) / 'catalog.json'}"
    )
    return len(songs)


def notify(title, subtitle):
    """display notification on macos, tested on ventura"""
    try:
        sh.osascript(e=f'display notification "{title}" with title "{subtitle}"')
    except:
        pass


def serialize_settings(new_settings):
    """update settings.json with specified dictionary"""
    settings.update(new_settings)
    json.dump(
        settings,
        open(pathlib.Path(homedir) / ".miditoyz" / "settings.json", "w"),
    )


def song_title(midi):
    """return song title from midi file object"""
    titles = [e.name for e in midi.tracks[0] if e.type == "track_name"]
    return titles[0] if titles and len(titles) > 0 else "untitled"


def generate_midi_voice_events(ch, msb, lsb, pc):
    """generate midi voice events for bank select and program change messages"""
    return [
        mido.Message("control_change", channel=ch, control=0, value=msb, time=0),
        mido.Message("control_change", channel=ch, control=32, value=lsb, time=0),
        mido.Message("program_change", channel=ch, program=pc - 1, time=0),
    ]


def stream_revoiced(songfile, index, song_count, voice_preferences, device):
    """revoice midi file with voice preferences"""
    channels = defaultdict(dict)
    serialize_settings({"bookmark": index + 1})
    midi = mido.MidiFile(songfile)
    title = song_title(midi)
    typer.echo(f"{title} ({songfile}), song {index+1} of {song_count}")
    if platform.system() == "Darwin":
        notify(f"{'/'.join(songfile.split('/')[-2:])}, #{index+1}", title)
    for event in midi.play():
        if event.type == "control_change" and event.control == 0:
            channels[event.channel]["msb"] = event.value
        elif event.type == "control_change" and event.control == 32:
            channels[event.channel]["lsb"] = event.value
        elif event.type == "program_change":
            ch = event.channel
            channels[event.channel]["pc"] = event.program + 1
            voice = (
                channels.get(ch).get("msb", 0),
                channels.get(ch).get("lsb", 0),
                channels.get(ch).get("pc", 1),
            )
            voice_preference = voice_preferences.get(voice, voice)
            if voice == voice_preference:
                typer.echo(f"  voicing channel {ch} with voice {voice}")
            else:
                typer.echo(
                    f"  revoicing channel {ch} from voice {voice} to preferred voice {voice_preference}"
                )
            for voice_event in generate_midi_voice_events(
                *tuple([*[ch], *voice_preference])
            ):
                device.send(voice_event)
        elif event.type == "sequencer_specific":
            typer.echo(f"  seq: {event}")
        else:
            device.send(event)


## cli commands...
@app.command()
def init(
    source_directory: pathlib.Path = typer.Argument(
        ..., help="Directory full of MIDI songs to clean up."
    ),
    destination_directory: pathlib.Path = typer.Argument(
        ...,
        help="Directory for cleaned up MIDI song collection with duplicates removed and catalog generated.",
    ),
):
    """Generate a new music collection from a source directory into a destination directory removing duplicates
    songs. Duplicates include same song in multiple directory paths, renamed versions of the same song, etc.
    that have identical song content "inside" the song MIDI file."""
    if not os.path.exists(source_directory):
        typer.echo(f"oops, source_directory {source_directory} doesn't exist")
        return
    if source_directory == destination_directory:
        typer.echo(
            f"oops, source_directory and destination_directory must be different"
        )
        return
    if not os.path.exists(destination_directory):
        os.makedirs(destination_directory)

    start_time = time.time()
    songs = ingest_music(source_directory, destination_directory)
    elapsed = (time.time() - start_time) / 60  # minutes
    typer.echo(
        f"  elapsed time was {elapsed:.2f} minutes, {elapsed/songs*1000:.2f} 1000 songs per minute..."
    )


@app.command()
def devices():
    """List currently connected midi output devices attached via USB, WIFI, or Bluetooth."""
    typer.echo(f"Connected midi device(s): {', '.join(set(mido.get_output_names()))}")


@app.command()
def stream(
    music: str = typer.Option(
        settings.get("music"),  # default to last music
        help='MIDI song file, directory full of music, or catalog list to stream. A catalog list is a JSON file containing list of song titles and "hashes" with the format: [{"title": "Autumn Leaves", "song": "hash.mid"}, ...].',
    ),
    bookmark: int = typer.Option(
        settings.get("bookmark", 0),
        help="Bookmark for last song played assuming you don't pick different music.",
    ),
    device: str = typer.Option(
        settings.get("device", "Clavinova Port 1"),
        help='MIDI device to stream to (e.g. "Clavinova Port 1" for USB, "Network Clavinova for WIFI, etc.))',
    ),
    debug: bool = typer.Option(
        False,
        help="Debug output.))",
    ),
):
    """
    Stream music from a catalog song list, a midi file, or directory full of midi files to a midi device with using
    bank selection and program changes based on voice preferences stored in "~/.miditoyz/settings.json"
    and saved automatically each time you stream.
    Catalog song lists are JSON files with the format: [{"title": "Autumn Leaves", "song": "hash.mid"}, ...] and
    can be created from your collections "catalog.json". Bookmark values are based on the sequential number of the
    song in the playlist or directory song list starting with 1.
    We do the right thing if you specify a bookmark number that's too big or small or your play different music than last time.
    Your command line options are remembered between streaming sessions, so subsequent streamings pick up from the last song played.
    """
    try:
        device = mido.open_output(device)
    except:
        typer.echo(
            f"oops, device {device} not found, please select from the following connected device list: {', '.join(set(mido.get_output_names()))}"
        )
        return
    is_song = music.lower().endswith(".mid")
    is_catalog_list = music.lower().endswith(".json")
    if bookmark < 0 or music != settings.get("music") or is_song:
        bookmark = 1
    serialize_settings({"music": music, "device": device, "bookmark": bookmark})
    if is_song:  # stream file...
        songs = [
            music,
        ]
    elif os.path.isdir(music):  # stream folder's midi files...
        songs = sorted(
            [
                f"{music}{os.sep}{x}"
                for x in os.listdir(music)
                if x.lower().endswith(".mid")
            ]
        )
    elif is_catalog_list:  # stream or catalog list...
        # catalog list format: [{"title": "Autumn Leaves", "song": "hash.mid"}, ...]
        songs = list(
            map(
                lambda x: f'{settings.get("catalog")[:-13]}{os.sep}{x.get("song")}',
                json.load(open(music)),
            )
        )
    else:
        typer.echo(
            "oops, music must be a catalog list, midi file, or directory full of midi files"
        )
        return
    if bookmark > len(songs):
        bookmark = 1
        typer.echo(
            f"{os.linesep}oops, your bookmark is beyond the last song in your music -- starting from the beginning...{os.linesep}"
        )
    try:  # revoice and stream songs...
        for skip, song in enumerate(songs):
            if skip >= bookmark - 1:
                stream_revoiced(song, skip, len(songs), voice_preferences, device)
    except:  # skip broken songs...
        if not debug:
            pass
        else:  # debug...
            raise


@app.command()
def voices(
    midi_file: str = typer.Argument(
        ..., help="MIDI song file to generate voice list for."
    ),
    voices: str = typer.Option(
        str(pathlib.Path(pathlib.Path.home()) / ".miditoyz" / "datalist.pickle"),
        help='Official Yamaha Clavinova "datalist" of voices. Check vendor documentation for other device voicing.',
    ),
    detail: bool = typer.Option(
        False,
        help="Include voice MSB, LSB, PC voice values for searching datalist csv or pdf for voice names.",
    ),
):
    """Generate a list of voices for each track in a midi song file."""
    if not os.path.exists(midi_file) or not is_midi(midi_file):
        typer.echo(
            f"oops, midi_file {midi_file} doesn't exist or isn't a midi song file"
        )
        return
    get_track_channel_voices(midi_file, pickle.load(open(voices, "rb")))


@app.command()
def dump(
    midi_file: str = typer.Argument(..., help="MIDI song file to be analyzed."),
    metadata: bool = typer.Option(False, help="Show only metadata."),
):
    """Dump a MIDI song file in raw text format. See also: "miditoyz raw --debug"."""
    if not os.path.exists(midi_file) or not is_midi(midi_file):
        typer.echo(
            f"oops, midi_file {midi_file} doesn't exist or isn't a midi song file"
        )
        return
    for dump in dump_midi(midi_file, metadata):
        typer.echo(dump)


@app.command()
def raw(
    midi_file: str = typer.Argument(
        ..., help="MIDI file to analyze in extended raw debug format."
    ),
    debug: bool = typer.Option(False, help="Enable extended raw debug mode."),
):
    """Dump a MIDI song file in alternative raw text format with optionally with hexdump-style debug output. See also: "miditoyz dump --metadata"."""
    if not os.path.exists(midi_file) or not is_midi(midi_file):
        typer.echo(
            f"oops, midi_file {midi_file} doesn't exist or isn't a midi song file"
        )
        return
    mido.MidiFile(midi_file, debug=debug).print_tracks()


@app.command()
def verify(
    midi_or_json_file: str = typer.Argument(
        ..., help="MIDI song or JSON file to verify for correct syntax."
    )
):
    """Verify MIDI song file can be processed with mido and music21 packages or that JSON file is syntactically correct format."""
    if not os.path.exists(midi_or_json_file) or not (
        is_midi(midi_or_json_file) or midi_or_json_file.lower().endswith(".json")
    ):
        typer.echo(
            f"oops, specified {midi_or_json_file} doesn't exist or isn't a midi song or JSON file"
        )
        return
    if is_midi(midi_or_json_file):
        typer.echo(f"verifying {midi_or_json_file} with mido and music21...")
        try:
            midi.MidiFile()
            typer.echo(f"  music21 ok!")
            mido.MidiFile(midi_or_json_file)
            typer.echo(f"  mido ok!")
        except:
            typer.echo(f"  oops, unable to verify with both mido and music21!")
    else:
        typer.echo(f"verifying {midi_or_json_file} is a valid JSON file...")
        try:
            json.load(open(midi_or_json_file))
            typer.echo(f"  JSON format ok!")
        except:
            typer.echo(f"  oops, invalid format!")


@app.command()
def catalog(
    catalog_file: str = typer.Argument(
        ..., help="Alternative catalog file from one of your miditoyz song collections."
    )
):
    """Change to a new catalog file for streaming."""
    if os.path.exists(catalog_file) and catalog_file.endswith(".json"):
        serialize_settings({"catalog": catalog_file})
    else:
        typer.echo(f"oops, {catalog_file} doesn't exist or isn't a catalog json file")


if __name__ == "__main__":
    app()
